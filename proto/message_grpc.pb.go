// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventHandlerClient is the client API for EventHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventHandlerClient interface {
	GetSpec(ctx context.Context, in *GetSpecRequest, opts ...grpc.CallOption) (*GetSpecResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	Cron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*CronResponse, error)
	HandleEvents(ctx context.Context, in *HandleEventsRequest, opts ...grpc.CallOption) (*HandleEventsResponse, error)
	InitEmitEvents(ctx context.Context, in *InitEmitEventsRequest, opts ...grpc.CallOption) (*InitEmitEventsResponse, error)
}

type eventHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventHandlerClient(cc grpc.ClientConnInterface) EventHandlerClient {
	return &eventHandlerClient{cc}
}

func (c *eventHandlerClient) GetSpec(ctx context.Context, in *GetSpecRequest, opts ...grpc.CallOption) (*GetSpecResponse, error) {
	out := new(GetSpecResponse)
	err := c.cc.Invoke(ctx, "/proto.EventHandler/GetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, "/proto.EventHandler/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) Cron(ctx context.Context, in *CronRequest, opts ...grpc.CallOption) (*CronResponse, error) {
	out := new(CronResponse)
	err := c.cc.Invoke(ctx, "/proto.EventHandler/Cron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) HandleEvents(ctx context.Context, in *HandleEventsRequest, opts ...grpc.CallOption) (*HandleEventsResponse, error) {
	out := new(HandleEventsResponse)
	err := c.cc.Invoke(ctx, "/proto.EventHandler/HandleEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) InitEmitEvents(ctx context.Context, in *InitEmitEventsRequest, opts ...grpc.CallOption) (*InitEmitEventsResponse, error) {
	out := new(InitEmitEventsResponse)
	err := c.cc.Invoke(ctx, "/proto.EventHandler/InitEmitEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventHandlerServer is the server API for EventHandler service.
// All implementations must embed UnimplementedEventHandlerServer
// for forward compatibility
type EventHandlerServer interface {
	GetSpec(context.Context, *GetSpecRequest) (*GetSpecResponse, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	Cron(context.Context, *CronRequest) (*CronResponse, error)
	HandleEvents(context.Context, *HandleEventsRequest) (*HandleEventsResponse, error)
	InitEmitEvents(context.Context, *InitEmitEventsRequest) (*InitEmitEventsResponse, error)
	mustEmbedUnimplementedEventHandlerServer()
}

// UnimplementedEventHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedEventHandlerServer struct {
}

func (UnimplementedEventHandlerServer) GetSpec(context.Context, *GetSpecRequest) (*GetSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpec not implemented")
}
func (UnimplementedEventHandlerServer) Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedEventHandlerServer) Cron(context.Context, *CronRequest) (*CronResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cron not implemented")
}
func (UnimplementedEventHandlerServer) HandleEvents(context.Context, *HandleEventsRequest) (*HandleEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleEvents not implemented")
}
func (UnimplementedEventHandlerServer) InitEmitEvents(context.Context, *InitEmitEventsRequest) (*InitEmitEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitEmitEvents not implemented")
}
func (UnimplementedEventHandlerServer) mustEmbedUnimplementedEventHandlerServer() {}

// UnsafeEventHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventHandlerServer will
// result in compilation errors.
type UnsafeEventHandlerServer interface {
	mustEmbedUnimplementedEventHandlerServer()
}

func RegisterEventHandlerServer(s grpc.ServiceRegistrar, srv EventHandlerServer) {
	s.RegisterService(&EventHandler_ServiceDesc, srv)
}

func _EventHandler_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EventHandler/GetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).GetSpec(ctx, req.(*GetSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EventHandler/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_Cron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).Cron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EventHandler/Cron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).Cron(ctx, req.(*CronRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_HandleEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).HandleEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EventHandler/HandleEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).HandleEvents(ctx, req.(*HandleEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_InitEmitEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitEmitEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).InitEmitEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EventHandler/InitEmitEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).InitEmitEvents(ctx, req.(*InitEmitEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventHandler_ServiceDesc is the grpc.ServiceDesc for EventHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EventHandler",
	HandlerType: (*EventHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpec",
			Handler:    _EventHandler_GetSpec_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _EventHandler_Configure_Handler,
		},
		{
			MethodName: "Cron",
			Handler:    _EventHandler_Cron_Handler,
		},
		{
			MethodName: "HandleEvents",
			Handler:    _EventHandler_HandleEvents_Handler,
		},
		{
			MethodName: "InitEmitEvents",
			Handler:    _EventHandler_InitEmitEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message.proto",
}

// EmitEventsHelperClient is the client API for EmitEventsHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmitEventsHelperClient interface {
	EmitEvents(ctx context.Context, in *EmitEventsRequest, opts ...grpc.CallOption) (*EmitEventsResponse, error)
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ChangeUserTags(ctx context.Context, in *ChangeUserTagsRequest, opts ...grpc.CallOption) (*ChangeUserTagsResponse, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error)
	ChangeRoomTags(ctx context.Context, in *ChangeRoomTagsRequest, opts ...grpc.CallOption) (*ChangeRoomTagsResponse, error)
}

type emitEventsHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewEmitEventsHelperClient(cc grpc.ClientConnInterface) EmitEventsHelperClient {
	return &emitEventsHelperClient{cc}
}

func (c *emitEventsHelperClient) EmitEvents(ctx context.Context, in *EmitEventsRequest, opts ...grpc.CallOption) (*EmitEventsResponse, error) {
	out := new(EmitEventsResponse)
	err := c.cc.Invoke(ctx, "/proto.EmitEventsHelper/EmitEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitEventsHelperClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error) {
	out := new(AuthenticateUserResponse)
	err := c.cc.Invoke(ctx, "/proto.EmitEventsHelper/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitEventsHelperClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/proto.EmitEventsHelper/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitEventsHelperClient) ChangeUserTags(ctx context.Context, in *ChangeUserTagsRequest, opts ...grpc.CallOption) (*ChangeUserTagsResponse, error) {
	out := new(ChangeUserTagsResponse)
	err := c.cc.Invoke(ctx, "/proto.EmitEventsHelper/ChangeUserTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitEventsHelperClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*GetRoomResponse, error) {
	out := new(GetRoomResponse)
	err := c.cc.Invoke(ctx, "/proto.EmitEventsHelper/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitEventsHelperClient) ChangeRoomTags(ctx context.Context, in *ChangeRoomTagsRequest, opts ...grpc.CallOption) (*ChangeRoomTagsResponse, error) {
	out := new(ChangeRoomTagsResponse)
	err := c.cc.Invoke(ctx, "/proto.EmitEventsHelper/ChangeRoomTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmitEventsHelperServer is the server API for EmitEventsHelper service.
// All implementations must embed UnimplementedEmitEventsHelperServer
// for forward compatibility
type EmitEventsHelperServer interface {
	EmitEvents(context.Context, *EmitEventsRequest) (*EmitEventsResponse, error)
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ChangeUserTags(context.Context, *ChangeUserTagsRequest) (*ChangeUserTagsResponse, error)
	GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error)
	ChangeRoomTags(context.Context, *ChangeRoomTagsRequest) (*ChangeRoomTagsResponse, error)
	mustEmbedUnimplementedEmitEventsHelperServer()
}

// UnimplementedEmitEventsHelperServer must be embedded to have forward compatible implementations.
type UnimplementedEmitEventsHelperServer struct {
}

func (UnimplementedEmitEventsHelperServer) EmitEvents(context.Context, *EmitEventsRequest) (*EmitEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitEvents not implemented")
}
func (UnimplementedEmitEventsHelperServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedEmitEventsHelperServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedEmitEventsHelperServer) ChangeUserTags(context.Context, *ChangeUserTagsRequest) (*ChangeUserTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserTags not implemented")
}
func (UnimplementedEmitEventsHelperServer) GetRoom(context.Context, *GetRoomRequest) (*GetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedEmitEventsHelperServer) ChangeRoomTags(context.Context, *ChangeRoomTagsRequest) (*ChangeRoomTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoomTags not implemented")
}
func (UnimplementedEmitEventsHelperServer) mustEmbedUnimplementedEmitEventsHelperServer() {}

// UnsafeEmitEventsHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmitEventsHelperServer will
// result in compilation errors.
type UnsafeEmitEventsHelperServer interface {
	mustEmbedUnimplementedEmitEventsHelperServer()
}

func RegisterEmitEventsHelperServer(s grpc.ServiceRegistrar, srv EmitEventsHelperServer) {
	s.RegisterService(&EmitEventsHelper_ServiceDesc, srv)
}

func _EmitEventsHelper_EmitEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitEventsHelperServer).EmitEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmitEventsHelper/EmitEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitEventsHelperServer).EmitEvents(ctx, req.(*EmitEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitEventsHelper_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitEventsHelperServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmitEventsHelper/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitEventsHelperServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitEventsHelper_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitEventsHelperServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmitEventsHelper/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitEventsHelperServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitEventsHelper_ChangeUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitEventsHelperServer).ChangeUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmitEventsHelper/ChangeUserTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitEventsHelperServer).ChangeUserTags(ctx, req.(*ChangeUserTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitEventsHelper_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitEventsHelperServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmitEventsHelper/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitEventsHelperServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitEventsHelper_ChangeRoomTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoomTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitEventsHelperServer).ChangeRoomTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmitEventsHelper/ChangeRoomTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitEventsHelperServer).ChangeRoomTags(ctx, req.(*ChangeRoomTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmitEventsHelper_ServiceDesc is the grpc.ServiceDesc for EmitEventsHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmitEventsHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EmitEventsHelper",
	HandlerType: (*EmitEventsHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmitEvents",
			Handler:    _EmitEventsHelper_EmitEvents_Handler,
		},
		{
			MethodName: "AuthenticateUser",
			Handler:    _EmitEventsHelper_AuthenticateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _EmitEventsHelper_GetUser_Handler,
		},
		{
			MethodName: "ChangeUserTags",
			Handler:    _EmitEventsHelper_ChangeUserTags_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _EmitEventsHelper_GetRoom_Handler,
		},
		{
			MethodName: "ChangeRoomTags",
			Handler:    _EmitEventsHelper_ChangeRoomTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message.proto",
}
