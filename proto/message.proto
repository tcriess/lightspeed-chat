syntax = "proto3";
package proto;

option go_package = "github.com/tcriess/lightspeed-chat/proto";

// requires:
// go get -u google.golang.org/protobuf/cmd/protoc-gen-go
// go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
// compile via
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/message.proto
// in the parent directory
// (alternatively, run go generate)

message ConfigureRequest {
    bytes data = 1;
}

message ConfigureResponse {
    string cron_spec = 1;
    string events_filter = 2;
}

message CronRequest {
    Room room = 1;
}

message CronResponse {
    repeated Event events = 1;
}

message Room {
    string id = 1;
    User owner = 2;
    map<string, string> tags = 3;
}

message User {
    string id = 1;
    string nick = 2;
    string language = 3;
    map<string, string> tags = 4;
    int64 last_online = 5;
}

message Source {
    User user = 1;
    string plugin_name = 2;
}

message Event {
    string id = 1;
    Room room = 2;
    Source source = 3;
    int64 created = 4;
    string language = 5;
    string name = 6;
    map<string, string> tags = 7;
    int64 sent = 8;
    string target_filter = 9;
    bool history = 10;
}

message HandleEventsRequest {
    repeated Event events = 1;
}

message HandleEventsResponse {
    repeated Event events = 1;
}

message InitEmitEventsRequest {
    uint32 emit_events_server = 1;
    Room room = 2;
}

message InitEmitEventsResponse {
}

service EventHandler {
    rpc Configure (ConfigureRequest) returns (ConfigureResponse);
    rpc Cron (CronRequest) returns (CronResponse);
    rpc HandleEvents (HandleEventsRequest) returns (HandleEventsResponse);
    rpc InitEmitEvents (InitEmitEventsRequest) returns (InitEmitEventsResponse);
}

message EmitEventsRequest {
    repeated Event events = 1;
}

message EmitEventsResponse {
}

message AuthenticateUserRequest {
    string id_token = 1;
    string provider = 2;
}

message AuthenticateUserResponse {
    User user = 1;
}

message GetUserRequest {
    string user_id = 1;
}

message GetUserResponse {
    User user = 1;
}

message GetRoomRequest {
    string room_id = 1;
}

message GetRoomResponse {
    Room room = 1;
}

message TagUpdate {
    string name = 1;
    enum TagValueType {
        STRING = 0;
        INT = 1;
        FLOAT = 2;
        STRINGSLICE = 3;
        INTSLICE = 4;
        FLOATSLICE = 5;
    }
    TagValueType type = 2;
    int64 index = 3;
    string expression = 4;
}

message ChangeUserTagsRequest {
    string user_id = 1;
    repeated TagUpdate tag_update = 2;
}

message ChangeUserTagsResponse {
    User user = 1;
    repeated bool ok = 2;
}

message ChangeRoomTagsRequest {
    string room_id = 1;
    repeated TagUpdate tag_update = 2;
}

message ChangeRoomTagsResponse {
    Room room = 1;
    repeated bool ok = 2;
}

service EmitEventsHelper {
    rpc EmitEvents (EmitEventsRequest) returns (EmitEventsResponse);
    rpc AuthenticateUser (AuthenticateUserRequest) returns (AuthenticateUserResponse);
    rpc GetUser (GetUserRequest) returns (GetUserResponse);
    rpc ChangeUserTags (ChangeUserTagsRequest) returns (ChangeUserTagsResponse);
    rpc GetRoom (GetRoomRequest) returns (GetRoomResponse);
    rpc ChangeRoomTags (ChangeRoomTagsRequest) returns (ChangeRoomTagsResponse);
}